import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ScrollView,
  Alert,
  Dimensions,
  Share,
} from 'react-native';
import {
  Card,
  Title,
  Paragraph,
  Button,
  IconButton,
  DataTable,
  Chip,
  List,
  Divider,
  ProgressBar,
} from 'react-native-paper';
import { useTranslation } from 'react-i18next';
import { Video } from 'expo-av';
import { LineChart } from 'react-native-chart-kit';
import Icon from 'react-native-vector-icons/MaterialIcons';
import apiService from '../services/apiService';
import { theme } from '../utils/theme';

const { width } = Dimensions.get('window');

const AnalysisDetailsScreen = ({ navigation, route }) => {
  const { t } = useTranslation();
  const { analysisId } = route.params;
  
  const [analysis, setAnalysis] = useState(null);
  const [results, setResults] = useState(null);
  const [status, setStatus] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [videoRef, setVideoRef] = useState(null);

  useEffect(() => {
    loadAnalysisDetails();
    
    // Poll for status updates if still processing
    const intervalId = setInterval(() => {
      if (status?.status === 'processing') {
        loadAnalysisStatus();
      }
    }, 5000);

    return () => clearInterval(intervalId);
  }, [analysisId]);

  const loadAnalysisDetails = async () => {
    try {
      setLoading(true);
      
      // Load analysis status
      const statusData = await apiService.getAnalysisStatus(analysisId);
      setStatus(statusData);
      
      // Load results if completed
      if (statusData.status === 'completed') {
        const resultsData = await apiService.getAnalysisResults(analysisId);
        setResults(resultsData);
      }
      
    } catch (err) {
      setError(err.message);
      Alert.alert(t('common.error'), err.message);
    } finally {
      setLoading(false);
    }
  };

  const loadAnalysisStatus = async () => {
    try {
      const statusData = await apiService.getAnalysisStatus(analysisId);
      setStatus(statusData);
      
      if (statusData.status === 'completed' && !results) {
        const resultsData = await apiService.getAnalysisResults(analysisId);
        setResults(resultsData);
      }
    } catch (err) {
      console.error('Error loading status:', err);
    }
  };

  const shareAnalysis = async () => {
    try {
      if (!results) return;
      
      const shareText = `
Sperm Analysis Results - ${analysisId.slice(-8)}
===========================================
Date: ${new Date(status.created_at).toLocaleDateString()}
Duration: ${status.duration || 'N/A'}s

Results:
• Total Sperm: ${results.summary.total_sperm}
• Motile Sperm: ${results.summary.motile_sperm}
• Motility: ${results.summary.motility_percentage.toFixed(1)}%
• Average Velocity: ${results.summary.avg_velocity.toFixed(1)} px/s
• Density: ${results.summary.density.toFixed(1)} per 10K pixels

Generated by Sperm Analyzer AI
      `;
      
      await Share.share({
        message: shareText,
        title: 'Sperm Analysis Results',
      });
    } catch (error) {
      Alert.alert(t('common.error'), error.message);
    }
  };

  const deleteAnalysis = async () => {
    Alert.alert(
      'Delete Analysis',
      'Are you sure you want to delete this analysis? This action cannot be undone.',
      [
        { text: 'Cancel', style: 'cancel' },
        {
          text: 'Delete',
          style: 'destructive',
          onPress: async () => {
            try {
              await apiService.deleteAnalysis(analysisId);
              navigation.goBack();
            } catch (error) {
              Alert.alert(t('common.error'), error.message);
            }
          },
        },
      ]
    );
  };

  const renderStatusCard = () => (
    <Card style={styles.statusCard}>
      <Card.Content>
        <View style={styles.statusHeader}>
          <Title>Analysis Status</Title>
          <Chip
            icon={getStatusIcon(status?.status)}
            style={[styles.statusChip, { backgroundColor: getStatusColor(status?.status) }]}
            textStyle={styles.statusText}
          >
            {status?.status || 'Unknown'}
          </Chip>
        </View>
        
        <View style={styles.statusInfo}>
          <Text style={styles.infoLabel}>Analysis ID:</Text>
          <Text style={styles.infoValue}>{analysisId.slice(-12)}</Text>
        </View>
        
        <View style={styles.statusInfo}>
          <Text style={styles.infoLabel}>Created:</Text>
          <Text style={styles.infoValue}>
            {status?.created_at ? new Date(status.created_at).toLocaleString() : 'N/A'}
          </Text>
        </View>
        
        <View style={styles.statusInfo}>
          <Text style={styles.infoLabel}>Duration:</Text>
          <Text style={styles.infoValue}>{status?.duration ? `${status.duration}s` : 'N/A'}</Text>
        </View>

        {status?.status === 'processing' && (
          <View style={styles.progressSection}>
            <Text style={styles.progressLabel}>Progress: {status.progress || 0}%</Text>
            <ProgressBar progress={(status.progress || 0) / 100} color={theme.colors.primary} />
          </View>
        )}
      </Card.Content>
    </Card>
  );

  const renderVideoCard = () => (
    <Card style={styles.videoCard}>
      <Card.Content>
        <Title>Analysis Video</Title>
        {status?.video_path ? (
          <Video
            ref={setVideoRef}
            source={{ uri: status.video_path }}
            style={styles.video}
            useNativeControls
            resizeMode="contain"
            shouldPlay={false}
          />
        ) : (
          <View style={styles.videoPlaceholder}>
            <Icon name="video-library" size={48} color={theme.colors.disabled} />
            <Text style={styles.videoPlaceholderText}>Video not available</Text>
          </View>
        )}
      </Card.Content>
    </Card>
  );

  const renderResultsCard = () => {
    if (!results) return null;

    return (
      <Card style={styles.resultsCard}>
        <Card.Content>
          <Title>Analysis Results</Title>
          
          <View style={styles.metricsGrid}>
            <View style={styles.metricCard}>
              <Text style={styles.metricValue}>{results.summary.total_sperm}</Text>
              <Text style={styles.metricLabel}>Total Sperm</Text>
            </View>
            <View style={styles.metricCard}>
              <Text style={styles.metricValue}>{results.summary.motile_sperm}</Text>
              <Text style={styles.metricLabel}>Motile Sperm</Text>
            </View>
            <View style={styles.metricCard}>
              <Text style={styles.metricValue}>{results.summary.motility_percentage.toFixed(1)}%</Text>
              <Text style={styles.metricLabel}>Motility</Text>
            </View>
            <View style={styles.metricCard}>
              <Text style={styles.metricValue}>{results.summary.avg_velocity.toFixed(1)}</Text>
              <Text style={styles.metricLabel}>Avg Velocity</Text>
            </View>
          </View>

          <Divider style={styles.divider} />

          <DataTable>
            <DataTable.Header>
              <DataTable.Title>Metric</DataTable.Title>
              <DataTable.Title numeric>Value</DataTable.Title>
            </DataTable.Header>

            <DataTable.Row>
              <DataTable.Cell>Total Sperm Detected</DataTable.Cell>
              <DataTable.Cell numeric>{results.summary.total_sperm}</DataTable.Cell>
            </DataTable.Row>

            <DataTable.Row>
              <DataTable.Cell>Active Sperm</DataTable.Cell>
              <DataTable.Cell numeric>{results.summary.active_sperm}</DataTable.Cell>
            </DataTable.Row>

            <DataTable.Row>
              <DataTable.Cell>Motile Sperm</DataTable.Cell>
              <DataTable.Cell numeric>{results.summary.motile_sperm}</DataTable.Cell>
            </DataTable.Row>

            <DataTable.Row>
              <DataTable.Cell>Motility Percentage</DataTable.Cell>
              <DataTable.Cell numeric>{results.summary.motility_percentage.toFixed(1)}%</DataTable.Cell>
            </DataTable.Row>

            <DataTable.Row>
              <DataTable.Cell>Average Velocity</DataTable.Cell>
              <DataTable.Cell numeric>{results.summary.avg_velocity.toFixed(1)} px/s</DataTable.Cell>
            </DataTable.Row>

            <DataTable.Row>
              <DataTable.Cell>Max Velocity</DataTable.Cell>
              <DataTable.Cell numeric>{results.summary.max_velocity.toFixed(1)} px/s</DataTable.Cell>
            </DataTable.Row>

            <DataTable.Row>
              <DataTable.Cell>Density</DataTable.Cell>
              <DataTable.Cell numeric>{results.summary.density.toFixed(1)} per 10K px</DataTable.Cell>
            </DataTable.Row>
          </DataTable>
        </Card.Content>
      </Card>
    );
  };

  const renderParametersCard = () => (
    <Card style={styles.parametersCard}>
      <Card.Content>
        <Title>Analysis Parameters</Title>
        <List.Section>
          <List.Item
            title="Confidence Threshold"
            description={status?.parameters?.confidence_threshold?.toFixed(2) || 'N/A'}
            left={() => <List.Icon icon="tune" />}
          />
          <List.Item
            title="Motility Threshold"
            description={status?.parameters?.motility_threshold?.toFixed(2) || 'N/A'}
            left={() => <List.Icon icon="speed" />}
          />
          <List.Item
            title="Max Detections"
            description={status?.parameters?.max_detections || 'N/A'}
            left={() => <List.Icon icon="format-list-numbered" />}
          />
          <List.Item
            title="Tracking Enabled"
            description={status?.parameters?.enable_tracking ? 'Yes' : 'No'}
            left={() => <List.Icon icon="track-changes" />}
          />
        </List.Section>
      </Card.Content>
    </Card>
  );

  const renderChart = () => {
    if (!results || !results.frame_data) return null;

    const data = {
      labels: results.frame_data.slice(0, 10).map((_, index) => `${index * 5}s`),
      datasets: [
        {
          data: results.frame_data.slice(0, 10).map(frame => frame.motile_count),
          color: (opacity = 1) => `rgba(134, 65, 244, ${opacity})`,
          strokeWidth: 2,
        },
      ],
    };

    return (
      <Card style={styles.chartCard}>
        <Card.Content>
          <Title>Motility Over Time</Title>
          <LineChart
            data={data}
            width={width - 64}
            height={220}
            chartConfig={{
              backgroundColor: theme.colors.surface,
              backgroundGradientFrom: theme.colors.surface,
              backgroundGradientTo: theme.colors.surface,
              decimalPlaces: 0,
              color: (opacity = 1) => `rgba(134, 65, 244, ${opacity})`,
              labelColor: (opacity = 1) => `rgba(0, 0, 0, ${opacity})`,
              style: { borderRadius: 16 },
            }}
            bezier
            style={styles.chart}
          />
        </Card.Content>
      </Card>
    );
  };

  const getStatusColor = (status) => {
    switch (status) {
      case 'completed':
        return '#4CAF50';
      case 'processing':
        return '#FF9800';
      case 'failed':
        return '#F44336';
      default:
        return theme.colors.surfaceVariant;
    }
  };

  const getStatusIcon = (status) => {
    switch (status) {
      case 'completed':
        return 'check-circle';
      case 'processing':
        return 'hourglass-empty';
      case 'failed':
        return 'error';
      default:
        return 'help';
    }
  };

  if (loading) {
    return (
      <View style={styles.loadingContainer}>
        <Text>Loading analysis details...</Text>
      </View>
    );
  }

  if (error) {
    return (
      <View style={styles.errorContainer}>
        <Icon name="error" size={64} color={theme.colors.error} />
        <Text style={styles.errorText}>Failed to load analysis details</Text>
        <Button mode="contained" onPress={loadAnalysisDetails}>
          Retry
        </Button>
      </View>
    );
  }

  return (
    <ScrollView style={styles.container}>
      <View style={styles.header}>
        <IconButton
          icon="share"
          size={24}
          onPress={shareAnalysis}
        />
        <IconButton
          icon="delete"
          size={24}
          onPress={deleteAnalysis}
        />
      </View>

      {renderStatusCard()}
      {renderVideoCard()}
      {renderResultsCard()}
      {renderChart()}
      {renderParametersCard()}

      <View style={styles.actionButtons}>
        <Button
          mode="outlined"
          onPress={() => navigation.navigate('Results', { analysisId })}
          style={styles.actionButton}
          icon="assessment"
        >
          View Results
        </Button>
        <Button
          mode="contained"
          onPress={() => navigation.navigate('Analysis')}
          style={styles.actionButton}
          icon="add"
        >
          New Analysis
        </Button>
      </View>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: theme.colors.background,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'flex-end',
    padding: 8,
  },
  statusCard: {
    margin: 16,
    marginBottom: 12,
  },
  statusHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  statusChip: {
    paddingHorizontal: 8,
  },
  statusText: {
    color: 'white',
    fontSize: 12,
  },
  statusInfo: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    marginBottom: 8,
  },
  infoLabel: {
    fontSize: 14,
    color: theme.colors.onSurfaceVariant,
  },
  infoValue: {
    fontSize: 14,
    fontWeight: '500',
    color: theme.colors.onSurface,
  },
  progressSection: {
    marginTop: 16,
  },
  progressLabel: {
    fontSize: 14,
    marginBottom: 8,
    color: theme.colors.onSurface,
  },
  videoCard: {
    marginHorizontal: 16,
    marginBottom: 12,
  },
  video: {
    width: '100%',
    height: 200,
    backgroundColor: '#000',
    borderRadius: 8,
    marginTop: 8,
  },
  videoPlaceholder: {
    width: '100%',
    height: 200,
    backgroundColor: theme.colors.surfaceVariant,
    borderRadius: 8,
    justifyContent: 'center',
    alignItems: 'center',
    marginTop: 8,
  },
  videoPlaceholderText: {
    marginTop: 8,
    color: theme.colors.onSurfaceVariant,
  },
  resultsCard: {
    marginHorizontal: 16,
    marginBottom: 12,
  },
  metricsGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'space-between',
    marginBottom: 16,
  },
  metricCard: {
    width: '48%',
    alignItems: 'center',
    padding: 12,
    backgroundColor: theme.colors.surfaceVariant,
    borderRadius: 8,
    marginBottom: 8,
  },
  metricValue: {
    fontSize: 20,
    fontWeight: 'bold',
    color: theme.colors.primary,
  },
  metricLabel: {
    fontSize: 12,
    color: theme.colors.onSurfaceVariant,
    textAlign: 'center',
    marginTop: 4,
  },
  divider: {
    marginVertical: 16,
  },
  chartCard: {
    marginHorizontal: 16,
    marginBottom: 12,
  },
  chart: {
    marginVertical: 8,
    borderRadius: 16,
  },
  parametersCard: {
    marginHorizontal: 16,
    marginBottom: 16,
  },
  actionButtons: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    padding: 16,
  },
  actionButton: {
    flex: 1,
    marginHorizontal: 4,
  },
  loadingContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: theme.colors.background,
  },
  errorContainer: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    backgroundColor: theme.colors.background,
    padding: 32,
  },
  errorText: {
    fontSize: 16,
    color: theme.colors.onSurface,
    textAlign: 'center',
    marginVertical: 16,
  },
});

export default AnalysisDetailsScreen;